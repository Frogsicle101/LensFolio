package nz.ac.canterbury.seng302.portfolio.controller;

import nz.ac.canterbury.seng302.portfolio.service.UserAccountsClientService;
import nz.ac.canterbury.seng302.shared.identityprovider.GetPaginatedUsersRequest;
import nz.ac.canterbury.seng302.shared.identityprovider.PaginatedUsersResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import java.util.Optional;

@Controller
public class UserListController {

    @Autowired
    private UserAccountsClientService userAccountsClientService;

    /**
     * Used to create the list of users, 50 per page, by default sorted by users names. Adds all these values on
     * the webpage to be displayed. Also used for the other pages in the user list. Passes through users as well as
     * information needed to create the navigation
     *
     * @param model model Parameters sent to thymeleaf template to be rendered into HTML
     * @param page an optional integer parameter that is used to get the correct page of users
     * @return Message generated by IdP about authenticate attempt
     */
    @GetMapping("/user-list")
    public String userList(Model model, @RequestParam("page") Optional<Integer> page) {
        int pageNum = page.orElse(1);
        int usersPerPageLimit = 50;
        int offset = (pageNum - 1) * usersPerPageLimit;

        GetPaginatedUsersRequest.Builder request = GetPaginatedUsersRequest.newBuilder();
        request.setOffset(offset);
        request.setLimit(usersPerPageLimit);
        request.setOrderBy("name");
        PaginatedUsersResponse response = userAccountsClientService.getPaginatedUsers(request.build());

        int numUsers = response.getResultSetSize();
        int totalPages = numUsers / usersPerPageLimit;
        if ((numUsers % usersPerPageLimit) != 0) {
            totalPages++;
        }

        model.addAttribute("totalPages", totalPages);
        model.addAttribute("currentPage", pageNum);
        model.addAttribute("totalItems", numUsers);
        model.addAttribute("user_list", response.getUsersList());
        return "user-list";
    }


}
